Critique of "Cats vs. Spectre: An Axiomatic Approach to Modeling Speculative Execution Attacks" Ponce-de-León and Kinder (2022) [1] by Will Wesley

This paper presents the use of a modeling language (CAT) that is used to describe memory consistency to model speculative execution in a bounded model checking (BMC) framework to identify unsafe behavior in benchmark examples for Spectre vulnerable code and then to prove that an application of fences make the code safe in most instances.
The first half of the paper illustrates modelling control flow and memory access in traditional in-order execution progressing through speculative and out-of-order execution.
From constraints on control flow, they constructed CAT models with which to programmatically solve for program execution control flows.
To validate their models, they created a tool, Kaibyo, that accepts an x86 program, a CAT model, an unrolling bound, and the address of a location in memory that should not be accessible.
They then ran several benchmark programs through the tool and compared the accuracy and performance against Spectector and Binsec. 

The major weakness with the approach is a weakness of BMC approaches in general.
The two instances where applying fences could not be proved by Kaibyo involved loops for which unrolling exceeded the bounds imposed on the checker and for which necessary bounds may not be finite.

The clarity of writing in this paper is a major strength.
The authors are very clear in defining the problem, explaining their approach, and showing how their model can be used to detect code that is vulnerable to known Spectre variants and the relative ease it has in adapting to new threats.
We were impressed by the opening paragraph of the introduction as both succinctly describing speculative execution attacks and setting the context for their method.
We were further impressed with the apparent late addition of material addressing a new variant that was reported during the ``final phase of preparing [the] paper,'' exploiting memory ordering machine clears.

We would have liked the paper to make some comment with respect to how this approach could be extended to other speculative execution threats such as Meltdown and Foreshadow, or if the authors thought such an application was possible at all.
They also only evaluated their approach against attacks via pattern history table, store-to-load forwarding, predictive store forwarding, and the aforementioned machine clears variants.
However, this weakness gave them room to go into depth on the machinery of their approach and it appears that they were already exploring more than what the state of the art approaches had.

Future work based on this research could be to investigate application of CAT and Kaibyo to other speculative execution vulnerabilities.
The paper assumes a predictor that is incorrect every time, which would be the worse case scenario for speculative attacks.
There may be a way to show that predictor accuracy will affect the degree to which code is vulnerable to these kinds of attacks.

[1] H. Ponce-de León and J. Kinder, ``Cats vs. spectre: An axiomatic approach to modeling speculative execution attacks,'' in 2022
IEEE Symposium on Security and Privacy (SP), pp. 235–248, 2022. 

